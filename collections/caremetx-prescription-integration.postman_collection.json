{
  "info": {
    "name": "Caremetx Prescription Integration",
    "description": "Automated test scenarios for POST /api/v1/caremetx/prescription-integration covering success, validation, and security cases.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.1.0"
  },
  "item": [
    {
      "name": "Valid Prescription Submission",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "ApiKey {{apiKey}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/v1/caremetx/prescription-integration",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "api",
            "v1",
            "caremetx",
            "prescription-integration"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"clientId\": 1,\n  \"programId\": 1,\n  \"prescription\": {\n    \"prescriptionNumber\": \"123456\",\n    \"ndc\": \"122345\",\n    \"quantity\": 2,\n    \"dosage\": \"500 grams\",\n    \"refillsNumber\": 2,\n    \"fillsMade\": 0,\n    \"refillsRemaining\": 2,\n    \"dispenseAsWritten\": true,\n    \"physicianSignature\": true,\n    \"physicianSignatureDate\": \"2025-09-29T13:09:08.758Z\",\n    \"expirationDate\": \"2025-09-29T13:09:08.758Z\",\n    \"daysSupply\": 30,\n    \"lastDispenseDate\": \"2025-09-29T13:09:08.758Z\",\n    \"nextAvailableRefillDate\": \"2025-09-29T13:09:08.758Z\",\n    \"source\": \"Source of Rx\"\n  },\n  \"patient\": {\n    \"patientId\": 313,\n    \"firstName\": \"Steve\",\n    \"lastName\": \"testPhys\",\n    \"dateOfBirth\": \"1980-09-29T13:09:08.758Z\",\n    \"gender\": 1,\n    \"languageId\": -1,\n    \"email\": \"user@example2.com\",\n    \"addresses\": [\n      {\n        \"type\": 0,\n        \"streetAddress\": \"14 Jessica Ct\",\n        \"city\": \"Taylosrville\",\n        \"state\": 26,\n        \"zipCode\": \"40071\",\n        \"addressExtension\": \"\"\n      }\n    ],\n    \"phones\": [\n      {\n        \"number\": \"5028021481\",\n        \"type\": 0,\n        \"extension\": \"\"\n      }\n    ]\n  },\n  \"physician\": {\n    \"npiNumber\": \"1234567891\",\n    \"firstName\": \"Some\",\n    \"lastName\": \"Guy\",\n    \"specialtyCode\": \"ENT\",\n    \"specialtyName\": \"Ear nose throat\",\n    \"addresses\": [\n      {\n        \"name\": \"Office\",\n        \"streetAddress\": \"123 Main St\",\n        \"city\": \"Louisville\",\n        \"state\": 21,\n        \"zipCode\": \"21811\",\n        \"addressExtension\": \"\"\n      }\n    ],\n    \"phones\": [\n      {\n        \"number\": \"7331933550\",\n        \"type\": 1,\n        \"extension\": \"\"\n      }\n    ]\n  }\n}"
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code indicates success', function () {",
              "    pm.expect([200, 201, 204]).to.include(pm.response.code);",
              "});",
              "",
              "if (pm.response.code !== 204) {",
              "    pm.test('Response is JSON', function () {",
              "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
              "    });",
              "    const json = pm.response.json();",
              "    pm.test('Response body contains envelope fields', function () {",
              "        pm.expect(json).to.be.an('object');",
              "        pm.expect(json).to.include.all.keys('value', 'code', 'success', 'message');",
              "    });",
              "    pm.test('Envelope indicates success', function () {",
              "        pm.expect(json.success).to.eql(true);",
              "        pm.expect(json.code).to.be.oneOf([200, 201, 204]);",
              "        pm.expect(json.message).to.be.a('string');",
              "    });",
              "    pm.test('Value contains identifiers and status', function () {",
              "        pm.expect(json.value).to.be.an('object');",
              "        pm.expect(json.value).to.have.property('prescriptionId');",
              "        pm.expect(json.value).to.have.property('caseId');",
              "        pm.expect(json.value).to.have.property('success');",
              "        pm.expect(json.value).to.have.property('message');",
              "    });",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Duplicate Submission Should Update",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Optionally delay to allow previous create to finish",
              "setTimeout(() => {}, 0);"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Duplicate submission returns success', function () {",
              "    pm.expect([200, 201, 204]).to.include(pm.response.code);",
              "});",
              "",
              "if (pm.response.code !== 204) {",
              "    const json = pm.response.json();",
              "    pm.test('Duplicate response matches envelope schema', function () {",
              "        pm.expect(json).to.be.an('object');",
              "        pm.expect(json).to.include.all.keys('value', 'code', 'success', 'message');",
              "        pm.expect(json.success).to.eql(true);",
              "    });",
              "    pm.test('Duplicate response indicates existing prescription', function () {",
              "        pm.expect(json.value).to.have.property('message');",
              "        pm.expect(json.value.message.toLowerCase()).to.include.oneOf(['already exists', 'updated']);",
              "    });",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "ApiKey {{apiKey}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/v1/caremetx/prescription-integration",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "api",
            "v1",
            "caremetx",
            "prescription-integration"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"clientId\": 1,\n  \"programId\": 1,\n  \"prescription\": {\n    \"prescriptionNumber\": \"123456\",\n    \"ndc\": \"122345\",\n    \"quantity\": 2,\n    \"dosage\": \"500 grams\",\n    \"refillsNumber\": 2,\n    \"fillsMade\": 1,\n    \"refillsRemaining\": 1,\n    \"dispenseAsWritten\": true,\n    \"physicianSignature\": true,\n    \"physicianSignatureDate\": \"2025-09-29T13:09:08.758Z\",\n    \"expirationDate\": \"2025-09-29T13:09:08.758Z\",\n    \"daysSupply\": 30,\n    \"lastDispenseDate\": \"2025-10-15T13:09:08.758Z\",\n    \"nextAvailableRefillDate\": \"2025-11-15T13:09:08.758Z\",\n    \"source\": \"Electronic\"\n  },\n  \"patient\": {\n    \"patientId\": 313,\n    \"firstName\": \"Steve\",\n    \"lastName\": \"testPhys\",\n    \"dateOfBirth\": \"1980-09-29T13:09:08.758Z\",\n    \"gender\": 1,\n    \"languageId\": -1,\n    \"email\": \"user@example2.com\",\n    \"addresses\": [\n      {\n        \"type\": 0,\n        \"streetAddress\": \"14 Jessica Ct\",\n        \"city\": \"Taylosrville\",\n        \"state\": 26,\n        \"zipCode\": \"40071\",\n        \"addressExtension\": \"Apt 2\"\n      }\n    ],\n    \"phones\": [\n      {\n        \"number\": \"5028021481\",\n        \"type\": 0,\n        \"extension\": \"\"\n      }\n    ]\n  },\n  \"physician\": {\n    \"npiNumber\": \"1234567891\",\n    \"firstName\": \"Some\",\n    \"lastName\": \"Guy\",\n    \"specialtyCode\": \"ENT\",\n    \"specialtyName\": \"Ear nose throat\",\n    \"addresses\": [\n      {\n        \"name\": \"Office\",\n        \"streetAddress\": \"123 Main St\",\n        \"city\": \"Louisville\",\n        \"state\": 21,\n        \"zipCode\": \"21811\",\n        \"addressExtension\": \"Suite 200\"\n      }\n    ],\n    \"phones\": [\n      {\n        \"number\": \"7331933550\",\n        \"type\": 1,\n        \"extension\": \"\"\n      }\n    ]\n  }\n}"
        }
      }
    },
    {
      "name": "Missing Required Field",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "ApiKey {{apiKey}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/v1/caremetx/prescription-integration",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "api",
            "v1",
            "caremetx",
            "prescription-integration"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"clientId\": 1,\n  \"programId\": 1,\n  \"prescription\": {\n    \"prescriptionNumber\": \"123456\",\n    \"ndc\": \"122345\",\n    \"quantity\": 2\n  },\n  \"patient\": {\n    \"patientId\": 313,\n    \"firstName\": \"Steve\",\n    \"dateOfBirth\": \"1980-09-29T13:09:08.758Z\",\n    \"gender\": 1\n  },\n  \"physician\": {\n    \"npiNumber\": \"1234567891\",\n    \"firstName\": \"Some\",\n    \"lastName\": \"Guy\"\n  }\n}"
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Missing required field returns 400', function () {",
              "    pm.expect(pm.response.code).to.eql(400);",
              "});",
              "",
              "const json = pm.response.json();",
              "pm.test('Validation error follows RFC 7807 problem schema', function () {",
              "    pm.expect(json).to.include.all.keys('type', 'title', 'status', 'traceId', 'errors');",
              "    pm.expect(json.status).to.eql(400);",
              "});",
              "pm.test('Field-specific error is returned for missing last name', function () {",
              "    pm.expect(json.errors).to.have.property('Patient.LastName');",
              "    pm.expect(json.errors['Patient.LastName'][0].toLowerCase()).to.include('required');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Invalid Data Type",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "ApiKey {{apiKey}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/v1/caremetx/prescription-integration",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "api",
            "v1",
            "caremetx",
            "prescription-integration"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"clientId\": \"one\",\n  \"programId\": 1,\n  \"prescription\": {\n    \"prescriptionNumber\": \"123456\",\n    \"ndc\": \"122345\",\n    \"quantity\": \"two\"\n  },\n  \"patient\": {\n    \"patientId\": \"ABC\",\n    \"firstName\": \"Steve\",\n    \"lastName\": \"testPhys\",\n    \"dateOfBirth\": \"not-a-date\",\n    \"gender\": \"male\"\n  },\n  \"physician\": {\n    \"npiNumber\": \"not-a-npi\",\n    \"firstName\": \"Some\",\n    \"lastName\": \"Guy\"\n  }\n}"
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Invalid data types return 400', function () {",
              "    pm.expect(pm.response.code).to.eql(400);",
              "});",
              "",
              "const json = pm.response.json();",
              "pm.test('Validation errors include details per field', function () {",
              "    pm.expect(json).to.include.all.keys('type', 'title', 'status', 'traceId', 'errors');",
              "    pm.expect(json.status).to.eql(400);",
              "    pm.expect(Object.keys(json.errors).length).to.be.greaterThan(0);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Invalid Program Identifier",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "ApiKey {{apiKey}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/v1/caremetx/prescription-integration",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "api",
            "v1",
            "caremetx",
            "prescription-integration"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"clientId\": 1,\n  \"programId\": 9999,\n  \"prescription\": {\n    \"prescriptionNumber\": \"123456\",\n    \"ndc\": \"122345\",\n    \"quantity\": 2\n  },\n  \"patient\": {\n    \"patientId\": 313,\n    \"firstName\": \"Steve\",\n    \"lastName\": \"testPhys\",\n    \"dateOfBirth\": \"1980-09-29T13:09:08.758Z\"\n  },\n  \"physician\": {\n    \"npiNumber\": \"1234567891\",\n    \"firstName\": \"Some\",\n    \"lastName\": \"Guy\"\n  }\n}"
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Unknown program or client returns 400 or 404', function () {",
              "    pm.expect([400, 404]).to.include(pm.response.code);",
              "});",
              "",
              "if (pm.response.code === 400) {",
              "    const json = pm.response.json();",
              "    pm.test('Program/client error is surfaced in problem payload', function () {",
              "        pm.expect(json).to.include.all.keys('type', 'title', 'status');",
              "        const errorText = JSON.stringify(json.errors || json).toLowerCase();",
              "        pm.expect(errorText).to.include.oneOf(['program', 'client']);",
              "    });",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Unauthorized - Missing API Key",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/v1/caremetx/prescription-integration",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "api",
            "v1",
            "caremetx",
            "prescription-integration"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"clientId\": 1,\n  \"programId\": 1,\n  \"prescription\": {\n    \"prescriptionNumber\": \"123456\"\n  },\n  \"patient\": {\n    \"patientId\": 313,\n    \"firstName\": \"Steve\",\n    \"lastName\": \"testPhys\"\n  },\n  \"physician\": {\n    \"npiNumber\": \"1234567891\",\n    \"firstName\": \"Some\",\n    \"lastName\": \"Guy\"\n  }\n}"
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Missing API key returns 401', function () {",
              "    pm.expect(pm.response.code).to.eql(401);",
              "});",
              "if (pm.response.headers.has('WWW-Authenticate')) {",
              "    pm.test('WWW-Authenticate header is present for unauthorized response', function () {",
              "        pm.expect(pm.response.headers.get('WWW-Authenticate')).to.be.a('string');",
              "    });",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Unauthorized - Invalid API Key",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "ApiKey {{invalidApiKey}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/v1/caremetx/prescription-integration",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "api",
            "v1",
            "caremetx",
            "prescription-integration"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"clientId\": 1,\n  \"programId\": 1,\n  \"prescription\": {\n    \"prescriptionNumber\": \"123456\"\n  },\n  \"patient\": {\n    \"patientId\": 313,\n    \"firstName\": \"Steve\",\n    \"lastName\": \"testPhys\"\n  },\n  \"physician\": {\n    \"npiNumber\": \"1234567891\",\n    \"firstName\": \"Some\",\n    \"lastName\": \"Guy\"\n  }\n}"
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Invalid API key returns 401', function () {",
              "    pm.expect(pm.response.code).to.eql(401);",
              "});",
              "if (pm.response.headers.has('WWW-Authenticate')) {",
              "    pm.test('Authenticate header indicates ApiKey scheme', function () {",
              "        pm.expect(pm.response.headers.get('WWW-Authenticate').toLowerCase()).to.include('apikey');",
              "    });",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Unauthorized - Empty API Key",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "ApiKey "
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/v1/caremetx/prescription-integration",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "api",
            "v1",
            "caremetx",
            "prescription-integration"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"clientId\": 1,\n  \"programId\": 1,\n  \"prescription\": {\n    \"prescriptionNumber\": \"123456\"\n  },\n  \"patient\": {\n    \"patientId\": 313,\n    \"firstName\": \"Steve\",\n    \"lastName\": \"testPhys\"\n  },\n  \"physician\": {\n    \"npiNumber\": \"1234567891\",\n    \"firstName\": \"Some\",\n    \"lastName\": \"Guy\"\n  }\n}"
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Empty API key returns 401', function () {",
              "    pm.expect(pm.response.code).to.eql(401);",
              "});",
              "if (pm.response.headers.has('WWW-Authenticate')) {",
              "    pm.test('Authenticate header indicates ApiKey scheme', function () {",
              "        pm.expect(pm.response.headers.get('WWW-Authenticate').toLowerCase()).to.include('apikey');",
              "    });",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Raw Medvantx Webhook Payload",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "ApiKey {{apiKey}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/v1/caremetx/prescription-integration",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "api",
            "v1",
            "caremetx",
            "prescription-integration"
          ]
        },
        "body": {
          "mode": "raw",
          "raw": "{\n  \"subscriptionId\": 2,\n  \"transactionId\": \"866318de-8037-4dd9-b8a2-33eb1a833a66\",\n  \"webhookUrl\": \"https://www.example.com/api/rx-updated\",\n  \"webhookEvent\": \"PrescriptionUpdated\",\n  \"webhookBody\": {\n    \"id\": \"2222222\",\n    \"pharmacyRxNumber\": \"111111111\",\n    \"ndc\": \"11111111111\",\n    \"isActive\": true,\n    \"refillsRemaining\": 2.4,\n    \"fillsMade\": 1.6,\n    \"daysSupply\": 90,\n    \"sigCode\": \"T1D\",\n    \"sigText\": \"Take one daily\",\n    \"writtenQuantity\": 30,\n    \"writtenDate\": \"2021-11-20\",\n    \"lastDispenseDate\": \"2021-12-01\",\n    \"nextAvailableRefillDate\": \"2022-01-01\",\n    \"expirationDate\": \"2023-01-01\",\n    \"source\": \"Electronic\",\n    \"patient\": {\n      \"id\": \"A100\",\n      \"pharmacyId\": 3\n    },\n    \"prescriber\": {\n      \"npi\": \"333333333\",\n      \"firstName\": \"Jessica\",\n      \"lastName\": \"Jefferson\",\n      \"specialty\": {\n        \"code\": \"HEM\",\n        \"name\": \"Hematology\"\n      },\n      \"addresses\": [\n        {\n          \"type\": \"Business\",\n          \"line1\": \"123 Main\",\n          \"line2\": \"STE #4\",\n          \"line3\": \"\",\n          \"city\": \"Sioux Falls\",\n          \"state\": \"CA\",\n          \"zip\": \"55555\"\n        }\n      ],\n      \"phones\": [\n        {\n          \"number\": \"(605) 555-1111\",\n          \"type\": \"Business\",\n          \"extension\": \"55555\"\n        }\n      ]\n    }\n  }\n}"
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Raw MedVantx payload is rejected with validation error', function () {",
              "    pm.expect(pm.response.code).to.eql(400);",
              "});",
              "const json = pm.response.json();",
              "pm.test('API reports missing top-level P3 contract fields', function () {",
              "    pm.expect(json).to.include.all.keys('type', 'title', 'status', 'traceId', 'errors');",
              "    pm.expect(Object.keys(json.errors)).to.include.members(['Patient', 'Physician', 'Prescription']);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "https://example.p3.api"
    },
    {
      "key": "apiKey",
      "value": "{{PLACEHOLDER_VALID_API_KEY}}"
    },
    {
      "key": "invalidApiKey",
      "value": "INVALID-KEY"
    }
  ]
}
