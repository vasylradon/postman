{
	"info": {
		"_postman_id": "499f9b23-9dab-4b55-9e32-dd5cf38f035f",
		"name": "Caremetx Prescription Integration",
		"description": "Automation helpers for exercising POST /api/v1/caremetx/prescription-integration plus lookup calls for downstream verification.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19115467"
	},
	"item": [
		{
			"name": "Prescription Intake",
			"item": [
				{
					"name": "01 Unauthorized - Invalid API Key",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.upsert({ key: 'Authorization', value: 'ApiKey ' + (pm.variables.get('invalidApiKey') || 'INVALID') });"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Unauthorized response returns 401', function () {",
									"    pm.expect(pm.response.code).to.eql(401);",
									"});",
									"if (pm.response.headers.has('Content-Type') && pm.response.headers.get('Content-Type').includes('json')) {",
									"    const json = pm.response.json();",
									"    pm.test('Unauthorized payload follows RFC 7807 format', function () {",
									"        pm.expect(json).to.include.keys('type', 'title', 'status');",
									"        pm.expect(json.status).to.eql(401);",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"clientId\": {{clientId}},\n  \"programId\": {{programId}},\n  \"prescription\": {\n    \"prescriptionNumber\": \"RX-UNAUTH\",\n    \"ndc\": \"11111111111\",\n    \"quantity\": 1\n  },\n  \"patient\": {\n    \"patientId\": 1001,\n    \"firstName\": \"Test\",\n    \"lastName\": \"User\",\n    \"dateOfBirth\": \"1980-01-01T00:00:00Z\",\n    \"phones\": [\n      {\n        \"number\": \"5025550100\",\n        \"type\": 0\n      }\n    ]\n  },\n  \"physician\": {\n    \"npiNumber\": \"1234567890\",\n    \"firstName\": \"Auth\",\n    \"lastName\": \"Check\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/caremetx/prescription-integration",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"caremetx",
								"prescription-integration"
							]
						}
					},
					"response": []
				},
				{
					"name": "02 New Prescription Ingestion",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const seed = Date.now();",
									"const short = seed.toString().slice(-5);",
									"const patientId = Math.floor(Math.random() * 900000) + 100000;",
									"const patientFirst = `Auto${short}`;",
									"const patientLast = `Person${short}`;",
									"const patientPhone = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();",
									"const physicianNpi = (Math.floor(Math.random() * 9000000000) + 1000000000).toString();",
									"const physicianFirst = `Phys${short}`;",
									"const physicianLast = `Owner${short}`;",
									"const facilityAddress1 = `${Math.floor(Math.random() * 900) + 100} Integration Way`;",
									"const facilityCity = 'Louisville';",
									"const facilityState = 21;",
									"const facilityZip = (Math.floor(Math.random() * 90000) + 10000).toString();",
									"const facilityExtension = `Suite ${short}`;",
									"const prescriptionNumber = `RX-${seed}`;",
									"const ndc = (Math.floor(Math.random() * 90000000000) + 10000000000).toString();",
									"pm.collectionVariables.set('patientExternalId', patientId);",
									"pm.collectionVariables.set('patientFirstNameOriginal', patientFirst);",
									"pm.collectionVariables.set('patientLastNameOriginal', patientLast);",
									"pm.collectionVariables.set('patientFirstNameCurrent', patientFirst);",
									"pm.collectionVariables.set('patientLastNameCurrent', patientLast);",
									"pm.collectionVariables.set('patientPhonePrimary', patientPhone);",
									"pm.collectionVariables.set('patientEmail', `caremetx-qa+${short}@example.com`);",
									"pm.collectionVariables.set('physicianNpi', physicianNpi);",
									"pm.collectionVariables.set('physicianFirstNameOriginal', physicianFirst);",
									"pm.collectionVariables.set('physicianLastNameOriginal', physicianLast);",
									"pm.collectionVariables.set('physicianFirstNameCurrent', physicianFirst);",
									"pm.collectionVariables.set('physicianLastNameCurrent', physicianLast);",
									"pm.collectionVariables.set('facilityAddress1', facilityAddress1);",
									"pm.collectionVariables.set('facilityAddress1Current', facilityAddress1);",
									"pm.collectionVariables.set('facilityCity', facilityCity);",
									"pm.collectionVariables.set('facilityState', facilityState);",
									"pm.collectionVariables.set('facilityZip', facilityZip);",
									"pm.collectionVariables.set('facilityAddressExtensionOriginal', facilityExtension);",
									"pm.collectionVariables.set('facilityAddressExtensionCurrent', facilityExtension);",
									"pm.collectionVariables.set('prescriptionNumber', prescriptionNumber);",
									"pm.collectionVariables.set('prescriptionNdc', ndc);",
									"pm.collectionVariables.set('openCasePrescriptionNumber', `RX-CASE-${seed}`);",
									"pm.collectionVariables.set('multiAddressToken', short);"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status indicates creation success', function () {",
									"    pm.expect([200, 201]).to.include(pm.response.code);",
									"});",
									"const json = pm.response.json();",
									"const successSchema = {",
									"  type: 'object',",
									"  required: ['value', 'code', 'success', 'message'],",
									"  properties: {",
									"    value: {",
									"      type: 'object',",
									"      required: ['prescriptionId', 'caseId', 'success', 'message'],",
									"      properties: {",
									"        prescriptionId: { type: ['string', 'number'] },",
									"        caseId: { type: ['string', 'number'] },",
									"        success: { type: 'boolean' },",
									"        message: { type: 'string' }",
									"      }",
									"    },",
									"    code: { type: 'number' },",
									"    success: { type: 'boolean' },",
									"    message: { type: 'string' }",
									"  }",
									"};",
									"pm.test('Success response matches contract schema', function () {",
									"    pm.expect(tv4.validate(json, successSchema), JSON.stringify(tv4.error)).to.be.true;",
									"});",
									"pm.test('Envelope indicates success', function () {",
									"    pm.expect(json.success).to.eql(true);",
									"    pm.expect(json.code).to.be.oneOf([200, 201, 204]);",
									"});",
									"pm.collectionVariables.set('lastCaseId', json.value.caseId);",
									"pm.collectionVariables.set('lastPrescriptionId', json.value.prescriptionId);",
									"pm.collectionVariables.set('latestSuccessMessage', json.value.message);",
									"pm.test('Identifiers captured for downstream verification', function () {",
									"    pm.expect(pm.collectionVariables.get('lastCaseId')).to.exist;",
									"    pm.expect(pm.collectionVariables.get('lastPrescriptionId')).to.exist;",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"clientId\": {{clientId}},\n  \"programId\": {{programId}},\n  \"prescription\": {\n    \"prescriptionNumber\": \"{{prescriptionNumber}}\",\n    \"ndc\": \"{{prescriptionNdc}}\",\n    \"quantity\": 30,\n    \"dosage\": \"500 mg\",\n    \"refillsNumber\": 2,\n    \"fillsMade\": 0,\n    \"refillsRemaining\": 2,\n    \"dispenseAsWritten\": true,\n    \"physicianSignature\": true,\n    \"physicianSignatureDate\": \"2025-01-15T00:00:00Z\",\n    \"expirationDate\": \"2026-01-15T00:00:00Z\",\n    \"daysSupply\": 30,\n    \"lastDispenseDate\": \"2024-12-20T00:00:00Z\",\n    \"nextAvailableRefillDate\": \"2025-01-20T00:00:00Z\",\n    \"source\": \"Electronic\"\n  },\n  \"patient\": {\n    \"patientId\": {{patientExternalId}},\n    \"firstName\": \"{{patientFirstNameCurrent}}\",\n    \"lastName\": \"{{patientLastNameCurrent}}\",\n    \"dateOfBirth\": \"1950-05-04T00:00:00Z\",\n    \"gender\": 1,\n    \"languageId\": -1,\n    \"email\": \"{{patientEmail}}\",\n    \"addresses\": [\n      {\n        \"type\": 0,\n        \"streetAddress\": \"{{facilityAddress1}}\",\n        \"city\": \"{{facilityCity}}\",\n        \"state\": {{facilityState}},\n        \"zipCode\": \"{{facilityZip}}\",\n        \"addressExtension\": \"{{facilityAddressExtensionCurrent}}\"\n      }\n    ],\n    \"phones\": [\n      {\n        \"number\": \"{{patientPhonePrimary}}\",\n        \"type\": 0,\n        \"extension\": \"\"\n      }\n    ]\n  },\n  \"physician\": {\n    \"npiNumber\": \"{{physicianNpi}}\",\n    \"firstName\": \"{{physicianFirstNameCurrent}}\",\n    \"lastName\": \"{{physicianLastNameCurrent}}\",\n    \"specialtyCode\": \"ENT\",\n    \"specialtyName\": \"Ear Nose Throat\",\n    \"addresses\": [\n      {\n        \"name\": \"Primary Office\",\n        \"streetAddress\": \"{{facilityAddress1}}\",\n        \"city\": \"{{facilityCity}}\",\n        \"state\": {{facilityState}},\n        \"zipCode\": \"{{facilityZip}}\",\n        \"addressExtension\": \"{{facilityAddressExtensionCurrent}}\"\n      }\n    ],\n    \"phones\": [\n      {\n        \"contactMethod\" : 0,\n        \"number\": \"73319{{multiAddressToken}}\",\n        \"type\": 1,\n        \"extension\": \"\"\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/caremetx/prescription-integration",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"caremetx",
								"prescription-integration"
							]
						}
					},
					"response": []
				},
				{
					"name": "03 Patient Update for Existing Prescription",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const suffix = '-' + (Math.floor(Math.random() * 900) + 100);",
									"const updatedFirst = pm.collectionVariables.get('patientFirstNameOriginal') + suffix;",
									"const updatedLast = pm.collectionVariables.get('patientLastNameOriginal') + suffix;",
									"pm.collectionVariables.set('patientFirstNameCurrent', updatedFirst);",
									"pm.collectionVariables.set('patientLastNameCurrent', updatedLast);",
									"pm.collectionVariables.set('patientEmail', `caremetx-qa+update${suffix.replace('-', '')}@example.com`);",
									"pm.collectionVariables.set('patientPhonePrimary', (Math.floor(Math.random() * 9000000000) + 1000000000).toString());"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Existing patient update succeeds', function () {",
									"    pm.expect([200, 204]).to.include(pm.response.code);",
									"});",
									"const json = pm.response.json();",
									"pm.test('Update response indicates success', function () {",
									"    pm.expect(json).to.include.keys('value', 'code', 'success', 'message');",
									"    pm.expect(json.success).to.eql(true);",
									"    pm.expect(json.value).to.be.an('object');",
									"});",
									"pm.test('Update response message reflects existing prescription handling', function () {",
									"    pm.expect(json.value.message.toLowerCase()).to.include.oneOf(['updated', 'already exists']);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"clientId\": {{clientId}},\n  \"programId\": {{programId}},\n  \"prescription\": {\n    \"prescriptionNumber\": \"{{prescriptionNumber}}\",\n    \"ndc\": \"{{prescriptionNdc}}\",\n    \"quantity\": 30\n  },\n  \"patient\": {\n    \"patientId\": {{patientExternalId}},\n    \"firstName\": \"{{patientFirstNameCurrent}}\",\n    \"lastName\": \"{{patientLastNameCurrent}}\",\n    \"dateOfBirth\": \"1950-05-04T00:00:00Z\",\n    \"gender\": 1,\n    \"email\": \"{{patientEmail}}\",\n    \"phones\": [\n      {\n        \"number\": \"{{patientPhonePrimary}}\",\n        \"type\": 0\n      }\n    ]\n  },\n  \"physician\": {\n    \"npiNumber\": \"{{physicianNpi}}\",\n    \"firstName\": \"{{physicianFirstNameCurrent}}\",\n    \"lastName\": \"{{physicianLastNameCurrent}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/caremetx/prescription-integration",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"caremetx",
								"prescription-integration"
							]
						}
					},
					"response": []
				},
				{
					"name": "04 Physician Update Should Be Ignored",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const suffix = '-' + (Math.floor(Math.random() * 90) + 10);",
									"pm.variables.set('physicianFirstNameAttempt', pm.collectionVariables.get('physicianFirstNameOriginal') + suffix);",
									"pm.variables.set('physicianLastNameAttempt', pm.collectionVariables.get('physicianLastNameOriginal') + suffix);"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Physician update attempt succeeds', function () {",
									"    pm.expect([200, 204]).to.include(pm.response.code);",
									"});",
									"const updateResponse = pm.response.json();",
									"pm.test('Physician update attempt response indicates no duplication', function () {",
									"    pm.expect(updateResponse).to.have.property('value');",
									"    const message = ((updateResponse.value && updateResponse.value.message) || '').toString().toLowerCase();",
									"    pm.expect(['already exists', 'unchanged', 'updated'].some(function (keyword) { return message.includes(keyword); })).to.be.true;",
									"});",
									"const baseUrl = pm.variables.replaceIn('{{base_url}}');",
									"if (!baseUrl || baseUrl.includes('{{')) {",
									"    console.warn('base_url variable is not resolved; skipping physician verification lookup.');",
									"    return;",
									"}",
									"const npi = pm.collectionVariables.get('physicianNpi') || pm.collectionVariables.get('physicianNpiExisting') || '1234567464';",
									"const authHeader = pm.variables.replaceIn('ApiKey {{apiKey}}');",
									"if (!authHeader || authHeader.includes('{{')) {",
									"    console.warn('apiKey variable is not resolved; skipping physician verification lookup.');",
									"    return;",
									"}",
									"pm.sendRequest({",
									"    url: `${baseUrl}/api/v1/Physicians/getByNPI?npi=${encodeURIComponent(npi)}`,",
									"    method: 'GET',",
									"    header: { Authorization: authHeader }",
									"}, function (err, res) {",
									"    pm.test('Physician lookup after update attempt succeeds', function () {",
									"        pm.expect(err).to.eql(null);",
									"        pm.expect(res).to.be.an('object');",
									"        pm.expect(res.code).to.eql(200);",
									"    });",
									"    if (err || !res) {",
									"        return;",
									"    }",
									"    const lookup = res.json();",
									"    const value = lookup && lookup.value ? lookup.value : {};",
									"    pm.collectionVariables.set('physicianFirstNameCurrent', value.firstName || pm.collectionVariables.get('physicianFirstNameCurrent') || '');",
									"    pm.collectionVariables.set('physicianLastNameCurrent', value.lastName || pm.collectionVariables.get('physicianLastNameCurrent') || '');",
									"    pm.test('Physician names remain unchanged after update attempt', function () {",
									"        pm.expect(value.firstName).to.eql(pm.collectionVariables.get('physicianFirstNameOriginal'));",
									"        pm.expect(value.lastName).to.eql(pm.collectionVariables.get('physicianLastNameOriginal'));",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"clientId\": {{clientId}},\n  \"programId\": {{programId}},\n  \"prescription\": {\n    \"prescriptionNumber\": \"{{prescriptionNumber}}\",\n    \"ndc\": \"{{prescriptionNdc}}\",\n    \"quantity\": 30\n  },\n  \"patient\": {\n    \"patientId\": {{patientExternalId}},\n    \"firstName\": \"{{patientFirstNameCurrent}}\",\n    \"lastName\": \"{{patientLastNameCurrent}}\"\n  },\n  \"physician\": {\n    \"npiNumber\": \"{{physicianNpi}}\",\n    \"firstName\": \"{{physicianFirstNameAttempt}}\",\n    \"lastName\": \"{{physicianLastNameAttempt}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/caremetx/prescription-integration",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"caremetx",
								"prescription-integration"
							]
						}
					},
					"response": []
				},
				{
					"name": "05 Existing Facility Secondary Field Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const extension = `Suite ${Math.floor(Math.random() * 900) + 100}`;",
									"pm.variables.set('facilityExtensionAttempt', extension);"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Facility update returns success', function () {",
									"    pm.expect([200, 204]).to.include(pm.response.code);",
									"});",
									"const json = pm.response.json();",
									"pm.test('Facility update response indicates success', function () {",
									"    pm.expect(json.success).to.eql(true);",
									"});",
									"pm.collectionVariables.set('facilityAddressExtensionCurrent', pm.variables.get('facilityExtensionAttempt'));"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"clientId\": {{clientId}},\n  \"programId\": {{programId}},\n  \"prescription\": {\n    \"prescriptionNumber\": \"{{prescriptionNumber}}\",\n    \"ndc\": \"{{prescriptionNdc}}\",\n    \"quantity\": 30\n  },\n  \"patient\": {\n    \"patientId\": {{patientExternalId}},\n    \"firstName\": \"{{patientFirstNameCurrent}}\",\n    \"lastName\": \"{{patientLastNameCurrent}}\"\n  },\n  \"physician\": {\n    \"npiNumber\": \"{{physicianNpi}}\",\n    \"firstName\": \"{{physicianFirstNameCurrent}}\",\n    \"lastName\": \"{{physicianLastNameCurrent}}\",\n    \"addresses\": [\n      {\n        \"name\": \"Primary Office\",\n        \"streetAddress\": \"{{facilityAddress1}}\",\n        \"city\": \"{{facilityCity}}\",\n        \"state\": {{facilityState}},\n        \"zipCode\": \"{{facilityZip}}\",\n        \"addressExtension\": \"{{facilityExtensionAttempt}}\"\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/caremetx/prescription-integration",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"caremetx",
								"prescription-integration"
							]
						}
					},
					"response": []
				},
				{
					"name": "06 New Prescription With Existing Open Case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Open case conflict returns 400', function () {",
									"    pm.expect(pm.response.code).to.eql(400);",
									"});",
									"const json = pm.response.json();",
									"pm.test('Open case error structure matches expected contract', function () {",
									"    pm.expect(json).to.include.keys('errors', 'code', 'success', 'message');",
									"    pm.expect(json.code).to.eql(400);",
									"    pm.expect(json.success).to.eql(false);",
									"    pm.expect(json.errors).to.have.property('message');",
									"    pm.expect(json.errors.message).to.be.an('array').that.is.not.empty;",
									"});",
									"pm.test('Open case error explains existing open case restriction', function () {",
									"    const messageText = Array.isArray(json.errors.message) ? json.errors.message.join(' ') : String(json.errors.message || '');",
									"    pm.expect(messageText.toLowerCase()).to.include('already has an open case');",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"clientId\": {{clientId}},\n  \"programId\": {{programId}},\n  \"prescription\": {\n    \"prescriptionNumber\": \"{{openCasePrescriptionNumber}}\",\n    \"ndc\": \"{{prescriptionNdc}}\",\n    \"quantity\": 30\n  },\n  \"patient\": {\n    \"patientId\": {{patientExternalId}},\n    \"firstName\": \"{{patientFirstNameCurrent}}\",\n    \"lastName\": \"{{patientLastNameCurrent}}\"\n  },\n  \"physician\": {\n    \"npiNumber\": \"{{physicianNpi}}\",\n    \"firstName\": \"{{physicianFirstNameCurrent}}\",\n    \"lastName\": \"{{physicianLastNameCurrent}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/caremetx/prescription-integration",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"caremetx",
								"prescription-integration"
							]
						}
					},
					"response": []
				},
				{
					"name": "07 Duplicate Prescription Handling",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Duplicate submission succeeds', function () {",
									"    pm.expect([200, 204]).to.include(pm.response.code);",
									"});",
									"const json = pm.response.json();",
									"pm.test('Duplicate response indicates existing prescription reuse', function () {",
									"    pm.expect(json.value.message.toLowerCase()).to.include('already exists');",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"clientId\": {{clientId}},\n  \"programId\": {{programId}},\n  \"prescription\": {\n    \"prescriptionNumber\": \"{{prescriptionNumber}}\",\n    \"ndc\": \"{{prescriptionNdc}}\",\n    \"quantity\": 30\n  },\n  \"patient\": {\n    \"patientId\": {{patientExternalId}},\n    \"firstName\": \"{{patientFirstNameCurrent}}\",\n    \"lastName\": \"{{patientLastNameCurrent}}\"\n  },\n  \"physician\": {\n    \"npiNumber\": \"{{physicianNpi}}\",\n    \"firstName\": \"{{physicianFirstNameCurrent}}\",\n    \"lastName\": \"{{physicianLastNameCurrent}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/caremetx/prescription-integration",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"caremetx",
								"prescription-integration"
							]
						}
					},
					"response": []
				},
				{
					"name": "08 Missing Required Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Missing required fields return 400', function () {",
									"    pm.expect(pm.response.code).to.eql(400);",
									"});",
									"const json = pm.response.json();",
									"const errorSchema = {",
									"  type: 'object',",
									"  required: ['type', 'title', 'status', 'traceId', 'errors'],",
									"  properties: {",
									"    type: { type: 'string' },",
									"    title: { type: 'string' },",
									"    status: { type: 'number' },",
									"    traceId: { type: 'string' },",
									"    errors: { type: 'object' }",
									"  }",
									"};",
									"pm.test('Validation error matches RFC 7807 schema', function () {",
									"    pm.expect(tv4.validate(json, errorSchema), JSON.stringify(tv4.error)).to.be.true;",
									"});",
									"pm.test('Error payload highlights missing patient last name', function () {",
									"    pm.expect(json.errors['Patient.LastName'][0].toLowerCase()).to.include('required');",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"clientId\": {{clientId}},\n  \"programId\": {{programId}},\n  \"prescription\": {\n    \"prescriptionNumber\": \"{{prescriptionNumber}}\",\n    \"ndc\": \"{{prescriptionNdc}}\",\n    \"quantity\": 30\n  },\n  \"patient\": {\n    \"patientId\": {{patientExternalId}},\n    \"firstName\": \"{{patientFirstNameCurrent}}\"\n  },\n  \"physician\": {\n    \"npiNumber\": \"{{physicianNpi}}\",\n    \"firstName\": \"{{physicianFirstNameCurrent}}\",\n    \"lastName\": \"{{physicianLastNameCurrent}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/caremetx/prescription-integration",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"caremetx",
								"prescription-integration"
							]
						}
					},
					"response": []
				},
				{
					"name": "09 Required Fields Only",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const stamp = Date.now().toString();",
									"pm.variables.set('minimalPrescriptionNumber', `RX-MIN-${stamp}`);",
									"pm.variables.set('minimalPrescriptionNdc', (Math.floor(Math.random() * 90000000000) + 10000000000).toString());",
									"pm.variables.set('minimalPatientId', Math.floor(Math.random() * 900000) + 100000);",
									"pm.variables.set('minimalPatientFirstName', `Min${stamp.slice(-4)}`);",
									"pm.variables.set('minimalPatientLastName', `Req${stamp.slice(-4)}`);",
									"pm.variables.set('minimalPatientPhone', (Math.floor(Math.random() * 9000000000) + 1000000000).toString());",
									"pm.variables.set('minimalPhysicianNpi', (Math.floor(Math.random() * 9000000000) + 1000000000).toString());",
									"pm.variables.set('minimalPhysicianFirstName', `MiniPhys${stamp.slice(-3)}`);",
									"pm.variables.set('minimalPhysicianLastName', `Check${stamp.slice(-3)}`);"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Minimal payload succeeds', function () {",
									"    pm.expect([200, 204]).to.include(pm.response.code);",
									"});",
									"const json = pm.response.json();",
									"pm.test('Minimal payload response indicates success', function () {",
									"    pm.expect(json.success).to.eql(true);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"clientId\": {{clientId}},\n  \"programId\": {{programId}},\n  \"prescription\": {\n    \"prescriptionNumber\": \"{{minimalPrescriptionNumber}}\",\n    \"ndc\": \"{{minimalPrescriptionNdc}}\",\n    \"quantity\": 1\n  },\n  \"patient\": {\n    \"patientId\": {{minimalPatientId}},\n    \"firstName\": \"{{minimalPatientFirstName}}\",\n    \"lastName\": \"{{minimalPatientLastName}}\",\n    \"dateOfBirth\": \"1982-05-04T00:00:00Z\",\n    \"phones\": [\n      {\n        \"number\": \"{{minimalPatientPhone}}\",\n        \"type\": 0\n      }\n    ]\n  },\n  \"physician\": {\n    \"npiNumber\": \"{{minimalPhysicianNpi}}\",\n    \"firstName\": \"{{minimalPhysicianFirstName}}\",\n    \"lastName\": \"{{minimalPhysicianLastName}}\"\n  }\n}\n"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/caremetx/prescription-integration",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"caremetx",
								"prescription-integration"
							]
						}
					},
					"response": []
				},
				{
					"name": "10 Facility Association to Physician",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const seed = Date.now();",
									"const facilityAddress1 = `${Math.floor(Math.random() * 900) + 100} Assoc Ave`;",
									"const facilityExtension = `Floor ${Math.floor(Math.random() * 9) + 1}`;",
									"pm.variables.set('associationFacilityAddress1', facilityAddress1);",
									"pm.variables.set('associationFacilityExtension', facilityExtension);"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const baseUrl = pm.variables.replaceIn('{{base_url}}');",
									"const apiKey = pm.variables.get('apiKey');",
									"const npi = pm.variables.get('physicianNpi');",
									"const associationAddress1 = pm.variables.get('associationFacilityAddress1');",
									"const associationExtension = pm.variables.get('associationFacilityExtension');",
									"pm.test('Facility association call succeeds', function () {",
									"    pm.expect([200, 204]).to.include(pm.response.code);",
									"});",
									"if (!baseUrl || !apiKey || !npi) {",
									"    console.warn('Skipping physician lookup validation - missing baseUrl, apiKey, or physicianNpi variable.');",
									"    return;",
									"}",
									"pm.sendRequest({",
									"    url: `${baseUrl}/api/v1/physicians`,",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'Authorization': `${apiKey}`",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            skip: 0,",
									"            take: 15,",
									"            search: npi,",
									"            orderBy: 'string',",
									"            programId: Number(pm.variables.get('programId')) || 0,",
									"            facilityId: 0,",
									"            onlyActiveOffices: true,",
									"            excludedPhysiciansId: [0]",
									"        })",
									"    }",
									"}, function (err, res) {",
									"    pm.test('Physician facility lookup succeeded', function () {",
									"        pm.expect(err, 'Unexpected error from physician lookup').to.be.null;",
									"        pm.expect(res, 'Physician lookup response missing').to.exist;",
									"        if (res) {",
									"            pm.expect(res.code).to.eql(200);",
									"        }",
									"    });",
									"    if (err || !res) {",
									"        return;",
									"    }",
									"    const payload = res.json();",
									"    const first = payload && payload.value && payload.value[0];",
									"    const addresses = Array.isArray(first && first.addresses) ? first.addresses : [];",
									"    const matched = addresses.find(addr => addr && addr.address1 === associationAddress1 && (!associationExtension || addr.address2 === associationExtension));",
									"    pm.test('New facility address present for physician', function () {",
									"        pm.expect(matched, 'Expected newly associated facility to be returned by physician search').to.exist;",
									"    });",
									"    if (matched) {",
									"        pm.collectionVariables.set('facilityAddress1Current', matched.address1 || associationAddress1);",
									"        pm.collectionVariables.set('facilityAddressExtensionCurrent', matched.address2 || associationExtension || '');",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"clientId\": {{clientId}},\n  \"programId\": {{programId}},\n  \"prescription\": {\n    \"prescriptionNumber\": \"{{prescriptionNumber}}\",\n    \"ndc\": \"{{prescriptionNdc}}\",\n    \"quantity\": 15\n  },\n  \"patient\": {\n    \"patientId\": {{patientExternalId}},\n    \"firstName\": \"{{patientFirstNameCurrent}}\",\n    \"lastName\": \"{{patientLastNameCurrent}}\"\n  },\n  \"physician\": {\n    \"npiNumber\": \"{{physicianNpi}}\",\n    \"firstName\": \"{{physicianFirstNameCurrent}}\",\n    \"lastName\": \"{{physicianLastNameCurrent}}\",\n    \"addresses\": [\n      {\n        \"name\": \"Association Office\",\n        \"streetAddress\": \"{{associationFacilityAddress1}}\",\n        \"city\": \"{{facilityCity}}\",\n        \"state\": {{facilityState}},\n        \"zipCode\": \"{{facilityZip}}\",\n        \"addressExtension\": \"{{associationFacilityExtension}}\"\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/caremetx/prescription-integration",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"caremetx",
								"prescription-integration"
							]
						}
					},
					"response": []
				},
				{
					"name": "11 Multiple Physician Addresses",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const token = pm.collectionVariables.get('multiAddressToken') || Date.now().toString().slice(-5);",
									"pm.variables.set('multiAddressOne', `${Math.floor(Math.random() * 900) + 100} Multi Blvd`);",
									"pm.variables.set('multiAddressTwo', `${Math.floor(Math.random() * 900) + 100} Multi Ct`);",
									"pm.variables.set('multiExtensionOne', `Suite ${token}`);",
									"pm.variables.set('multiExtensionTwo', `Floor ${token}`);"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const baseUrl = pm.variables.replaceIn('{{base_url}}');",
									"const apiKey = pm.variables.get('apiKey');",
									"const npi = pm.variables.get('physicianNpi');",
									"const primaryAddress = pm.collectionVariables.get('facilityAddress1Current');",
									"const primaryExtension = pm.collectionVariables.get('facilityAddressExtensionCurrent');",
									"const satelliteAddress = pm.variables.get('multiAddressTwo');",
									"const satelliteExtension = pm.variables.get('multiExtensionTwo');",
									"pm.test('Multiple address submission succeeds', function () {",
									"    pm.expect([200, 204]).to.include(pm.response.code);",
									"});",
									"if (!baseUrl || !apiKey || !npi) {",
									"    console.warn('Skipping multi-address verification - missing baseUrl, apiKey, or physicianNpi.');",
									"    return;",
									"}",
									"pm.sendRequest({",
									"    url: `${baseUrl}/api/v1/physicians`,",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'Authorization': `${apiKey}`",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            skip: 0,",
									"            take: 15,",
									"            search: npi,",
									"            orderBy: 'string',",
									"            programId: Number(pm.variables.get('programId')) || 0,",
									"            facilityId: 0,",
									"            onlyActiveOffices: true,",
									"            excludedPhysiciansId: [0]",
									"        })",
									"    }",
									"}, function (err, res) {",
									"    pm.test('Physician lookup for multi-address verification succeeded', function () {",
									"        pm.expect(err, 'Unexpected error from physician lookup').to.be.null;",
									"        pm.expect(res, 'Physician lookup response missing').to.exist;",
									"        if (res) {",
									"            pm.expect(res.code).to.eql(200);",
									"        }",
									"    });",
									"    if (err || !res) {",
									"        return;",
									"    }",
									"    const payload = res.json();",
									"    const first = payload && payload.value && payload.value[0];",
									"    const addresses = Array.isArray(first && first.addresses) ? first.addresses : [];",
									"    pm.test('Primary facility remains associated', function () {",
									"        const primary = addresses.find(addr => addr && addr.address1 === primaryAddress && (!primaryExtension || addr.address2 === primaryExtension));",
									"        pm.expect(primary, 'Expected existing primary facility to remain associated').to.exist;",
									"    });",
									"    pm.test('Additional facility captured for physician', function () {",
									"        const secondary = addresses.find(addr => addr && addr.address1 === satelliteAddress && (!satelliteExtension || addr.address2 === satelliteExtension));",
									"        pm.expect(secondary, 'Expected secondary facility to be returned by physician search').to.exist;",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"clientId\": {{clientId}},\n  \"programId\": {{programId}},\n  \"prescription\": {\n    \"prescriptionNumber\": \"{{prescriptionNumber}}\",\n    \"ndc\": \"{{prescriptionNdc}}\",\n    \"quantity\": 10\n  },\n  \"patient\": {\n    \"patientId\": {{patientExternalId}},\n    \"firstName\": \"{{patientFirstNameCurrent}}\",\n    \"lastName\": \"{{patientLastNameCurrent}}\"\n  },\n  \"physician\": {\n    \"npiNumber\": \"{{physicianNpi}}\",\n    \"firstName\": \"{{physicianFirstNameCurrent}}\",\n    \"lastName\": \"{{physicianLastNameCurrent}}\",\n    \"addresses\": [\n      {\n        \"name\": \"Primary Office\",\n        \"streetAddress\": \"{{facilityAddress1Current}}\",\n        \"city\": \"{{facilityCity}}\",\n        \"state\": {{facilityState}},\n        \"zipCode\": \"{{facilityZip}}\",\n        \"addressExtension\": \"{{facilityAddressExtensionCurrent}}\"\n      },\n      {\n        \"name\": \"Satellite\",\n        \"streetAddress\": \"{{multiAddressTwo}}\",\n        \"city\": \"{{facilityCity}}\",\n        \"state\": {{facilityState}},\n        \"zipCode\": \"{{facilityZip}}\",\n        \"addressExtension\": \"{{multiExtensionTwo}}\"\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/caremetx/prescription-integration",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"caremetx",
								"prescription-integration"
							]
						}
					},
					"response": []
				},
				{
					"name": "12 Error Response Schema Validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validation error returns 400', function () {",
									"    pm.expect(pm.response.code).to.eql(400);",
									"});",
									"const json = pm.response.json();",
									"const errorSchema = {",
									"  type: 'object',",
									"  required: ['type', 'title', 'status', 'traceId', 'errors'],",
									"  properties: {",
									"    type: { type: 'string' },",
									"    title: { type: 'string' },",
									"    status: { type: 'number' },",
									"    traceId: { type: 'string' },",
									"    errors: { type: 'object' }",
									"  }",
									"};",
									"pm.test('Error payload validates against schema', function () {",
									"    pm.expect(tv4.validate(json, errorSchema), JSON.stringify(tv4.error)).to.be.true;",
									"});",
									"pm.test('Error payload lists missing top-level sections', function () {",
									"    pm.expect(Object.keys(json.errors)).to.include.members(['Patient.LastName', 'Patient.FirstName', 'Physician.LastName', 'Physician.FirstName', 'Physician.NPINumber', 'Prescription.NDC', 'Prescription.Quantity', 'Prescription.PrescriptionNumber']);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"clientId\": {{clientId}},\n  \"programId\": {{programId}},\n  \"prescription\": { },\n  \"patient\": { },\n  \"physician\": { }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/caremetx/prescription-integration",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"caremetx",
								"prescription-integration"
							]
						}
					},
					"response": []
				}
			],
			"description": "Scenario-specific POST requests for /api/v1/caremetx/prescription-integration covering happy path, validation, and data maintenance behaviors."
		},
		{
			"name": "Other",
			"item": [
				{
					"name": "Cases",
					"item": [
						{
							"name": "Get Case by ID",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{apiKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v1/Case/15",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"Case",
										"15"
									]
								}
							},
							"response": []
						},
						{
							"name": "Case Json Patch",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "ApiKey {{apiKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\r\n{        \r\n    \"op\": \"replace\",\r\n    \"path\": \"/statusId\",\r\n    \"value\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/Case/json-patch/6",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"Case",
										"json-patch",
										"6"
									]
								}
							},
							"response": []
						},
						{
							"name": "Close Case",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "ApiKey {{apiKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"taskId\": 0,\r\n  \"caseId\": 0,\r\n  \"reasonId\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/Case/CloseCase",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"Case",
										"CloseCase"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change Case Statuses",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "ApiKey {{apiKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"caseId\": 6,\r\n  \"statusId\": 1,\r\n  \"subStatusId\": 8,\r\n  \"subStatusReasonId\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/CaseStatuses",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"CaseStatuses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Case",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{apiKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"case\": {\r\n        \"id\": 17,\r\n        \"phaseId\": -1,\r\n        \"phase\": \"Unknown\",\r\n        \"statusId\": 1,\r\n        \"status\": {\r\n            \"id\": 1,\r\n            \"name\": \"Pending\",\r\n            \"canBeManuallySet\": false,\r\n            \"subStatuses\": [\r\n                {\r\n                    \"id\": 9,\r\n                    \"name\": \"Missing Information\",\r\n                    \"statusId\": 1,\r\n                    \"canBeManuallySet\": false,\r\n                    \"status\": null,\r\n                    \"subStatusReasons\": []\r\n                }\r\n            ]\r\n        },\r\n        \"subStatusId\": 9,\r\n        \"subStatus\": {\r\n            \"id\": 9,\r\n            \"name\": \"Missing Information\",\r\n            \"statusId\": 1,\r\n            \"canBeManuallySet\": false,\r\n            \"status\": null,\r\n            \"subStatusReasons\": []\r\n        },\r\n        \"subStatusReasonId\": null,\r\n        \"subStatusReason\": null,\r\n        \"queueConfigurationName\": null,\r\n        \"diagnosisId\": null,\r\n        \"diagnosis\": null,\r\n        \"patientId\": 49,\r\n        \"patient\": {\r\n            \"id\": 49,\r\n            \"dateOfBirth\": \"1980-09-29T00:00:00\",\r\n            \"gender\": 1,\r\n            \"socialSecurityNumber\": null,\r\n            \"experienced\": null,\r\n            \"bestMethodToContact\": null,\r\n            \"bestTimeToContact\": null,\r\n            \"currentMailingAddress\": null,\r\n            \"currentMailingAddressId\": null,\r\n            \"currentShippingAddress\": null,\r\n            \"currentShippingAddressId\": null,\r\n            \"currentConsents\": [],\r\n            \"hipaaConsentEndDate\": \"0001-01-01\",\r\n            \"programConsentEndDate\": \"0001-01-01\",\r\n            \"patientInsuranceIds\": [],\r\n            \"clientId\": 1,\r\n            \"legalUSResident\": null,\r\n            \"isHearingImpaired\": null,\r\n            \"languageId\": -1,\r\n            \"language\": {\r\n                \"id\": -1,\r\n                \"name\": \"English\"\r\n            },\r\n            \"languageIds\": [],\r\n            \"isProficientInEnglish\": null,\r\n            \"caregivers\": [],\r\n            \"externalPatientIdentifiers\": [\r\n                \"346\"\r\n            ],\r\n            \"dateWeightTaken\": null,\r\n            \"patientWeight\": null,\r\n            \"needsTranslator\": false,\r\n            \"caregiverId\": 0,\r\n            \"ageCategoryName\": null,\r\n            \"weightUnits\": null,\r\n            \"driversLicenseNumber\": null,\r\n            \"driversLicenseState\": null,\r\n            \"driversLicenseExpirationDate\": null,\r\n            \"middleName\": null,\r\n            \"contactInfos\": [\r\n                {\r\n                    \"name\": null,\r\n                    \"contactString\": \"user@example246.com\",\r\n                    \"countryIso2\": null,\r\n                    \"primary\": false,\r\n                    \"contactMethod\": 2,\r\n                    \"contactType\": null,\r\n                    \"externalSourceContactId\": null\r\n                },\r\n                {\r\n                    \"name\": null,\r\n                    \"contactString\": \"5028021446\",\r\n                    \"countryIso2\": null,\r\n                    \"primary\": false,\r\n                    \"contactMethod\": 0,\r\n                    \"contactType\": 0,\r\n                    \"externalSourceContactId\": null\r\n                }\r\n            ],\r\n            \"firstName\": \"John\",\r\n            \"lastName\": \"testPatient6\"\r\n        },\r\n        \"physicianId\": 16,\r\n        \"physician\": {\r\n            \"id\": 16,\r\n            \"firstName\": \"Jack\",\r\n            \"lastName\": \"testPhysician\",\r\n            \"name\": null,\r\n            \"organizationName\": null,\r\n            \"npi\": \"1234567464\",\r\n            \"physicianSpecialityId\": 16,\r\n            \"physicianSpecialityName\": \"Ear nose throat\",\r\n            \"taxonomies\": [],\r\n            \"addresses\": [\r\n                {\r\n                    \"id\": 3,\r\n                    \"name\": \"Office\",\r\n                    \"countryCode\": null,\r\n                    \"countryName\": null,\r\n                    \"addressPurpose\": null,\r\n                    \"addressType\": null,\r\n                    \"address1\": \"123 Main St\",\r\n                    \"address2\": \"\",\r\n                    \"city\": \"Louisville\",\r\n                    \"state\": \"ME\",\r\n                    \"postalCode\": \"21811\",\r\n                    \"telephoneNumber\": \"7331933440\",\r\n                    \"faxNumber\": null,\r\n                    \"email\": null,\r\n                    \"contactName\": null,\r\n                    \"countryId\": null,\r\n                    \"telephoneExternalSourceContactId\": null,\r\n                    \"faxNumberExternalSourceContactId\": null,\r\n                    \"emailExternalSourceContactId\": null,\r\n                    \"isActive\": true,\r\n                    \"contactInfos\": [],\r\n                    \"officeContactTitleId\": null\r\n                }\r\n            ],\r\n            \"officesCount\": 1,\r\n            \"ptan\": null,\r\n            \"taxId\": null\r\n        },\r\n        \"facilityId\": null,\r\n        \"facility\": null,\r\n        \"siteOfCareFacilityId\": null,\r\n        \"siteOfCareFacility\": null,\r\n        \"facilityContactId\": null,\r\n        \"facilityContact\": null,\r\n        \"specialtyPharmacyId\": null,\r\n        \"specialtyPharmacy\": null,\r\n        \"territory\": null,\r\n        \"prescriptionId\": 17,\r\n        \"prescription\": {\r\n            \"id\": 17,\r\n            \"dosage\": \"4\",\r\n            \"productNDC\": {\r\n                \"id\": 1,\r\n                \"ndc\": null,\r\n                \"description\": null,\r\n                \"dose\": null,\r\n                \"allowCustomFrequency\": false,\r\n                \"allowCustomDispenseAmount\": false,\r\n                \"allowCustomRefillAmount\": false,\r\n                \"productId\": 1,\r\n                \"product\": {\r\n                    \"id\": 1,\r\n                    \"name\": \"Quviviq\",\r\n                    \"code\": null,\r\n                    \"programId\": 1\r\n                }\r\n            },\r\n            \"quantity\": 2,\r\n            \"physicianSignature\": true,\r\n            \"physicianSignatureDate\": \"2025-09-29T00:00:00\",\r\n            \"refillsNumber\": 2,\r\n            \"fillsMade\": null,\r\n            \"refillsRemaining\": null,\r\n            \"dispenseAsWritten\": true,\r\n            \"createDate\": \"2025-10-14T00:00:00\",\r\n            \"expirationDate\": \"2025-09-29T00:00:00\",\r\n            \"rxNumber\": \"123457\",\r\n            \"rxNotes\": null,\r\n            \"source\": null,\r\n            \"daysSupply\": null,\r\n            \"prescriptionFrequencyId\": null,\r\n            \"prescriptionFrequencyNotes\": null\r\n        },\r\n        \"newCase\": false,\r\n        \"updated\": null,\r\n        \"salesRepId\": null,\r\n        \"salesRep\": null,\r\n        \"isOpen\": true,\r\n        \"canReactivate\": false,\r\n        \"createdDate\": \"2025-10-14T17:37:02.389-04:00\",\r\n        \"enrollmentStartDate\": \"2025-10-14T17:37:02.330015-04:00\",\r\n        \"enrollmentFormReceiptDate\": null,\r\n        \"typeId\": 1,\r\n        \"typeName\": \"Reimbursement\",\r\n        \"pharmacyBenefitManager\": null,\r\n        \"payerCovered\": null,\r\n        \"paRequired\": null,\r\n        \"tasks\": null,\r\n        \"program\": {\r\n            \"clientId\": 1,\r\n            \"clientName\": \"Idorsia\",\r\n            \"canAddNewMedicalPlansOnCaseSideTab\": true,\r\n            \"canAddNewPharmacyPlansOnCaseSideTab\": true,\r\n            \"programRequiresDeviceReturn\": false,\r\n            \"allowMultipleOpenCasesPerPatient\": false,\r\n            \"enrollmentTypeDaysSinceDiscontinued\": null,\r\n            \"closeDiscontinuedCasesDays\": null,\r\n            \"closeCancelledCasesDays\": 0,\r\n            \"fulfillmentConfig\": null,\r\n            \"id\": 1,\r\n            \"name\": \"Q & You\"\r\n        },\r\n        \"programId\": 1,\r\n        \"caseInsurances\": [],\r\n        \"numberPeopleInHousehold\": null,\r\n        \"totalHouseholdIncome\": null,\r\n        \"supportingDocumentation\": null,\r\n        \"otherSupportingDocumentationText\": null,\r\n        \"patientSignature\": null,\r\n        \"patientHasInsurance\": null,\r\n        \"patientSignatureDate\": null,\r\n        \"redirect\": false,\r\n        \"history\": [],\r\n        \"treatmentStartDate\": null,\r\n        \"treatmentEndDate\": null,\r\n        \"customProperties\": [],\r\n        \"complaints\": [],\r\n        \"closedDate\": null,\r\n        \"preferredProductProcurementMethodId\": null,\r\n        \"desiredSiteOfCareTypeId\": null,\r\n        \"diseaseId\": null,\r\n        \"enrollmentTypeId\": null,\r\n        \"enrollmentType\": null,\r\n        \"caseDocumentsInformation\": [],\r\n        \"salesManagerId\": null,\r\n        \"salesManager\": null,\r\n        \"caseManagerId\": null,\r\n        \"caseManager\": null,\r\n        \"accessSpecialistId\": null,\r\n        \"accessSpecialist\": null,\r\n        \"patientAccessLiaisonId\": null,\r\n        \"patientAccessLiaison\": null,\r\n        \"preferredRetailPharmacy\": {\r\n            \"name\": null,\r\n            \"phone\": null,\r\n            \"fax\": null,\r\n            \"ncpdp\": null,\r\n            \"address\": null\r\n        },\r\n        \"requestedProducts\": []\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/Case",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"Case"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get CaseStatuses",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "ApiKey {{apiKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v1/CaseStatuses?caseId=6",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"CaseStatuses"
									],
									"query": [
										{
											"key": "caseId",
											"value": "6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Case Closing Reasons",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "ApiKey {{apiKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"skip\": 0,\r\n  \"take\": 15,\r\n  \"search\": \"\",\r\n  \"orderBy\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/Case/GetCaseClosingReasons",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"Case",
										"GetCaseClosingReasons"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Prescription by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{apiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/Prescriptions/43",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"Prescriptions",
								"43"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{apiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/Product/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"Product",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product by ID",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{apiKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"skip\": 0,\r\n  \"take\": 15,\r\n  \"search\": \"\",\r\n  \"orderBy\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/Product/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"Product",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Products NDC by ID",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{apiKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"skip\": 0,\r\n  \"take\": 15,\r\n  \"search\": \"46318322753\",\r\n  \"orderBy\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/Product/{{programId}}/NDCs/{{productId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"Product",
								"{{programId}}",
								"NDCs",
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Facilities by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{apiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/Facilities/4",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"Facilities",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List of Patients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Unknown program or client returns 400 or 404', function () {",
									"    pm.expect([400, 404]).to.include(pm.response.code);",
									"});",
									"if (pm.response.text()) {",
									"    const json = pm.response.json();",
									"    pm.test('Error references program or client', function () {",
									"        pm.expect(JSON.stringify(json).toLowerCase()).to.include.oneOf(['program', 'client']);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"skip\": 0,\n  \"take\": 20,\n  \"search\": \"testPatient7\",\n  \"orderBy\": \"\",\n  \"ignoreSearchCriteria\": true,\n  \"programId\": 1\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/Patients",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"Patients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tasks by Case ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{apiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/CaseTasks/for/208",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"CaseTasks",
								"for",
								"208"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Task by Task ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{apiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/CaseTasks/0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"CaseTasks",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Patient by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{apiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/Patients/39",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"Patients",
								"39"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Physicians by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{apiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/Physicians/11",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"Physicians",
								"11"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Physicians by NPI",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{apiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/Physicians/getByNPI?npi={{physicianNpi}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"Physicians",
								"getByNPI"
							],
							"query": [
								{
									"key": "npi",
									"value": "{{physicianNpi}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Physician Lookup by Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const npi = pm.variables.get('physicianNpi');",
									"if (!npi) {",
									"    console.warn('physicianNpi not set; run Scenario 02 before using this lookup.');",
									"    pm.test('Physician lookup skipped (no physicianNpi variable)', function () {",
									"        pm.expect(true).to.be.true;",
									"    });",
									"    return;",
									"}",
									"pm.test('Physician lookup succeeded', function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"const body = pm.response.text();",
									"pm.test('Physician payload references identifiers', function () {",
									"    pm.expect(body).to.include(npi.toString());",
									"    const expectedFirst = pm.variables.get('physicianFirstNameCurrent');",
									"    const expectedLast = pm.variables.get('physicianLastNameCurrent');",
									"    if (expectedFirst) {",
									"        pm.expect(body).to.include(expectedFirst);",
									"    }",
									"    if (expectedLast) {",
									"        pm.expect(body).to.include(expectedLast);",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{apiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"skip\": 0,\r\n  \"take\": 15,\r\n  \"search\": \"3828095826\",\r\n  \"orderBy\": \"string\",\r\n  \"programId\": 1,\r\n  \"facilityId\": 0,\r\n  \"onlyActiveOffices\": true,\r\n  \"excludedPhysiciansId\": [\r\n    0\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/physicians",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"physicians"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://example.p3.api"
		},
		{
			"key": "apiKey",
			"value": "{{PLACEHOLDER_VALID_API_KEY}}"
		},
		{
			"key": "invalidApiKey",
			"value": "INVALID-KEY"
		},
		{
			"key": "clientId",
			"value": "1"
		},
		{
			"key": "programId",
			"value": "1"
		},
		{
			"key": "patientExternalId",
			"value": ""
		},
		{
			"key": "patientFirstNameOriginal",
			"value": ""
		},
		{
			"key": "patientLastNameOriginal",
			"value": ""
		},
		{
			"key": "patientFirstNameCurrent",
			"value": ""
		},
		{
			"key": "patientLastNameCurrent",
			"value": ""
		},
		{
			"key": "patientPhonePrimary",
			"value": ""
		},
		{
			"key": "patientEmail",
			"value": ""
		},
		{
			"key": "physicianNpi",
			"value": ""
		},
		{
			"key": "physicianFirstNameOriginal",
			"value": ""
		},
		{
			"key": "physicianLastNameOriginal",
			"value": ""
		},
		{
			"key": "physicianFirstNameCurrent",
			"value": ""
		},
		{
			"key": "physicianLastNameCurrent",
			"value": ""
		},
		{
			"key": "facilityAddress1",
			"value": ""
		},
		{
			"key": "facilityAddress1Current",
			"value": ""
		},
		{
			"key": "facilityCity",
			"value": ""
		},
		{
			"key": "facilityState",
			"value": ""
		},
		{
			"key": "facilityZip",
			"value": ""
		},
		{
			"key": "facilityAddressExtensionOriginal",
			"value": ""
		},
		{
			"key": "facilityAddressExtensionCurrent",
			"value": ""
		},
		{
			"key": "prescriptionNumber",
			"value": ""
		},
		{
			"key": "prescriptionNdc",
			"value": ""
		},
		{
			"key": "openCasePrescriptionNumber",
			"value": ""
		},
		{
			"key": "multiAddressToken",
			"value": ""
		},
		{
			"key": "lastCaseId",
			"value": ""
		},
		{
			"key": "lastPrescriptionId",
			"value": ""
		},
		{
			"key": "latestSuccessMessage",
			"value": ""
		}
	]
}
